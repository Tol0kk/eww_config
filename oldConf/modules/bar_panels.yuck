
;;; Valided
(defwidget hbar [] (centerbox
    :class "hpanel"
    ;; :class "hpanel ${workspaces.active_empty == '' ? "floating" : ""}" ;; TODO workspace fix
    (box
      :class "leftBar"
      :space-evenly false
      ; (panel_launcher)
      ; (panel_clock)
      ; (panel_workspaces :orientation "h")
      ; (panel_window :angle 0)
    )
    (box
      :class "centerBar"
      ;; (panel_media) ;; TODO Media Create
    )
    (box
      :class "righBar"
      :space-evenly false
      :halign "end"

(panel_colorpicker)
      (panel_system_indicators :orientation "h")
      (panel_powermenu)
    )
  ))

(defwidget panel_system_indicators [orientation] (box :class "panel"
    (eventbox
      ; :onclick "${EWW_CONFIG_DIR}/scripts/launcher toggle_menu quicksettings"
      :class "button system-indicators"
      (box
        :class "controls"
        :orientation orientation
        :space-evenly false
        ;; (controls_icon
          ;;     :orientation orientation
          ;;     :transition {orientation == "v" ? "slideup" : "slideleft"}
          ;;     :control "bluetooth"
          ;;     :reveal bluetooth_reveal
          ;;     :visible {bluetooth.state == "on"}
          ;;     :value {arraylength(bluetooth.connected_devices) == 0 ? "Not Connected" : bluetooth.connected_devices[0].name}
          ;;     :icon {bluetooth.icon}
          ;;     :style {bluetooth.state}
        ;;     :angle {orientation == "v" ? 90 : 0})
        ;; (controls_icon
          ;;     :orientation orientation
          ;;     :transition {orientation == "v" ? "slideup" : "slideleft"}
          ;;     :control "bt_speaker"
          ;;     :reveal bt_speaker_reveal
          ;;     :visible {arraylength(bluetooth.connected_devices) > 0}
          ;;     :value {bluetooth.connected_devices[0].name}
          ;;     :icon {bluetooth.connected_devices[0].icon}
          ;;     :style ""
        ;;     :angle {orientation == "v" ? 90 : 0})
    
        (controls_icon
          :orientation orientation
          :transition {orientation == "v" ? "slideup" : "slideleft"}
          :control "mute"
          :reveal mute_reveal
          :visible "true"
          :value {volume.mute.state == "off" ? "Recording" : "Muted"}
          :style ""
          :icon {volume.mute.icon}
        :angle {orientation == "v" ? 90 : 0})
    
        (controls_slider
          :orientation orientation
          :transition {orientation == "v" ? "slideup" : "slideleft"}
          :control "volume"
          :reveal volume_reveal
          :value {volume.level}
          :onchange "volumectl set {}"
          :icon {volume.icon}
        )
        ;; (controls_slider
          ;;     :orientation orientation
          ;;     :transition {orientation == "v" ? "slideup" : "slideleft"}
          ;;     :control "screen"
          ;;     :reveal screen_reveal
          ;;     :value {brightness.screen.level}
          ;;     :onchange "${EWW_CONFIG_DIR}/scripts/brightness set_screen {}"
        ;;     :icon {brightness.screen.icon})
        (controls_icon
          :orientation orientation
          :transition {orientation == "v" ? "slideup" : "slideleft"}
          :control "network"
          :reveal network_reveal
          :visible true
          :value {network[network.primary].ssid}
          :icon {network[network.primary].icon}
          :style {network[network.primary].style}
        :angle {orientation == "v" ? 90 : 0})
        (controls_icon
          :orientation orientation
          :transition {orientation == "v" ? "slideup" : "slideleft"}
          :control "battery"
          :reveal battery_reveal
          :visible {battery.availabe}
          :value {battery.percent}
          :icon {battery.icon}
          :style {battery.state}
        :angle 0)
        ;; (controls_icon
          ;;     :orientation orientation
          ;;     :transition {orientation == "v" ? "slideup" : "slideleft"}
          ;;     :control "notifications"
          ;;     :reveal notifications_reveal
          ;;     :visible true
          ;;     :value {notifications.count}
          ;;     :icon {notifications.icon}
          ;;     :style {notifications.count > 0 ? "active" : ""}
        ;;     :angle 0)
      ))))
  
  (defwidget controls_icon [control reveal value icon style angle orientation transition visible] (eventbox
      :visible visible
      :onhover "${EWW_CMD} update ${control}_reveal=true"
      :onhoverlost "${EWW_CMD} update ${control}_reveal=false"
      (box
        :space-evenly false
        :orientation orientation
        (revealer
          :transition transition
          :duration "300ms"
          :reveal reveal
          :class "reveal"
          (label
            :class "${style} ${control}"
            :angle angle
          :text value)
        )
        (label
          :class "${style} ${control} icon"
        :text icon)
      )
    ))
  
  (defwidget controls_slider [control reveal value onchange icon orientation transition] (eventbox
      :onscroll "${EWW_CONFIG_DIR}/scripts/${control} {}"
      :onhover "${EWW_CMD} update ${control}_reveal=true"
      :onhoverlost "${EWW_CMD} update ${control}_reveal=false"
      (box
        :space-evenly false
        :orientation orientation
        (revealer
          :transition transition
          :duration "300ms"
          :reveal reveal
          :class "reveal"
          (eventbox :class "slider ${orientation}" (scale
              :orientation orientation
              :flipped {orientation == "v"}
              :value value
            :onchange onchange)))
        (label
          :class "${control} icon"
          :text icon))))
  (defvar time_rev false)
  
  (defwidget panel_clock []
    (eventbox :onhover "eww update time_rev=true"
      :onhoverlost "eww update time_rev=false"
      :class "panel clock"
      (box :space-evenly "false" :orientation "h" :spacing "3"
        (label :text hour :class "hour")
        (label :text "⁝")
        (label :text minutes :class "minutes")
        (revealer :transition "slideleft"
          :reveal time_rev
          :class "revealer"
          :duration "350ms" ;; might use class button from interact
          (button :class "interact" :onclick "${EWW_CONFIG_DIR}/scripts/launcher toggle_menu calendar" date)))))
  
  (defwidget panel_launcher [] (box :class "panel launcher"
      (button
        :class "button launcher"
        ;; :onclick "${EWW_CONFIG_DIR}/scripts/launcher toggle_menu app_launcher" ;; TODO app launcher
        (box :class "icon" :halign "center")
      )
    ))
  
  (defwidget panel_workspaces [orientation]
    (box :class "panel workspaces"
      :space-evenly false
      :orientation orientation
      (for workspace in workspaces
        (button
          :class "workspace-btn ${workspace.id == active ? "active" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
          :onclick "hyprctl dispatch workspace ${workspace.id}"
          :valign "center"
          ;; (label :class "icon" :text {workspace.windows > 0 ? "${workspace.id == active ? "" : ""}" : ""}))
        (label :class "icon" :text {workspace.windows > 0 ? "${workspace.id == active ? "" : ""}" : ""}))
    )
  ))


(defwidget panel_window [angle] (box :class "panel window"
    (label
      ;; :visible {window != "null" ? true : false}
      ;; :text {window}
    :angle angle)
  ))

(defwidget panel_colorpicker [] (box :class "panel colorpicker"
    (button :class "button colorpicker"
      ;; :onclick "${EWW_CONFIG_DIR}/scripts/launcher colorpicker &" ;; TODO colorpicker
      (label :class "icon" :text "󰈊")
    )
  ))

(defvar bluetooth_reveal false)
(defvar bt_speaker_reveal false)
(defvar mute_reveal false)
(defvar notifications_reveal false)
(defvar battery_reveal false)
(defvar network_reveal false)
(defvar volume_reveal false)
(defvar screen_reveal false)

(defwidget panel_powermenu [] (box :class "panel powermenu" (button
      :class "button powermenu"
      :onclick "${EWW_CONFIG_DIR}/scripts/launcher toggle_menu powermenu"
      (label :class "icon" :text "")
    )))

;; (defwidget panel_media [] (box :class "panel" ;; TODO media install
    ;;     :visible {media.preferred != "null"}
    ;;     (eventbox
      ;;         :onclick "${EWW_CONFIG_DIR}/scripts/player ${media.preferred.name} play-pause"
      ;;         :onscroll "${EWW_CONFIG_DIR}/scripts/player ${media.preferred.name} {}"
      ;;         :class "button media"
      ;;         (box
        ;;             :space-evenly false
        ;;             (label :class "icon ${media.preferred.name}" :text {media.preferred.icon})
        ;;             (label :text "${media.preferred.artist} - ${media.preferred.title}")
      ;;         )
    ;;     )
  ;; ))